name: Deploy to K3s
on:
  repository_dispatch:
    types: [deploy-event]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
          
      - name: Deploy to EC2 with K3s
        run: |
          sshpass -p "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Define application directory
            APP_DIR="/home/${{ secrets.EC2_USERNAME }}/myapp"
            
            # Create application directory if it doesn't exist
            mkdir -p $APP_DIR
            
            # Navigate to application directory
            cd $APP_DIR
            
            # Clone or update repository
            if [ -d "$APP_DIR/.git" ]; then
              echo "Updating existing repository..."
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Login to Docker Hub to pull images if they're private
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Create or update Docker config secret for K3s
            kubectl create secret docker-registry regcred \
              --docker-server=https://index.docker.io/v1/ \
              --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
              --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
              --docker-email=${{ secrets.DOCKERHUB_EMAIL }} \
              -o yaml --dry-run=client | kubectl apply -f -
            
            # Apply Kubernetes manifests
            echo "Deploying to Kubernetes..."
            kubectl apply -f secret.yaml
            kubectl apply -f mysql-data-persistentvolumeclaim.yaml
            kubectl apply -f mysql-deployment.yaml
            kubectl apply -f mysql-service.yaml
            
            # Wait for MySQL to be ready
            echo "Waiting for MySQL to be ready..."
            kubectl wait --for=condition=ready pod -l io.kompose.service=mysql --timeout=300s
            
            # Deploy backend and frontend
            kubectl apply -f backend-deployment.yaml
            kubectl apply -f backend-service.yaml
            kubectl apply -f frontend-deployment.yaml
            kubectl apply -f frontend-service.yaml
            
            # Force pull new images and restart pods
            kubectl rollout restart deployment frontend
            kubectl rollout restart deployment backend
            
            # Check deployment status
            echo "Checking deployment status..."
            kubectl get pods
          EOF
