name: Deploy to EC2

on:
  push:
   branches: 
     - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This ensures we get the full history for PR detection
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install @octokit/rest
        
      - name: Generate Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node .github/workflows/generate-release-note.js
          
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to EC2
        run: |
          # Copy release notes to the server
          scp -o StrictHostKeyChecking=no release-notes.md ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/myapp/
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Define application directory
            APP_DIR="/home/${{ secrets.EC2_USERNAME }}/myapp"
            
            # Create application directory if it doesn't exist
            mkdir -p $APP_DIR
            
            # Navigate to application directory
            cd $APP_DIR
            
            # Clone or update repository
            if [ -d "$APP_DIR/.git" ]; then
              echo "Updating existing repository..."
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Run docker-compose
            echo "Starting application with Docker Compose..."
            docker compose down || true
            docker compose up -d --build
            
          EOF